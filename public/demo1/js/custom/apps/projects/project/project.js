/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/apps/projects/project/project.js":
/*!**************************************************************************!*\
  !*** ./resources/assets/core/js/custom/apps/projects/project/project.js ***!
  \**************************************************************************/
/***/ (() => {

eval("\n\n// Class definition\nvar KTProjectOverview = function () {\n  // Colors\n  var primary = KTUtil.getCssVariableValue('--kt-primary');\n  var lightPrimary = KTUtil.getCssVariableValue('--kt-primary-light');\n  var success = KTUtil.getCssVariableValue('--kt-success');\n  var lightSuccess = KTUtil.getCssVariableValue('--kt-success-light');\n  var gray200 = KTUtil.getCssVariableValue('--kt-gray-200');\n  var gray500 = KTUtil.getCssVariableValue('--kt-gray-500');\n\n  // Private functions\n  var initChart = function initChart() {\n    // init chart\n    var element = document.getElementById(\"project_overview_chart\");\n    if (!element) {\n      return;\n    }\n    var config = {\n      type: 'doughnut',\n      data: {\n        datasets: [{\n          data: [30, 45, 25],\n          backgroundColor: ['#00A3FF', '#50CD89', '#E4E6EF']\n        }],\n        labels: ['Active', 'Completed', 'Yet to start']\n      },\n      options: {\n        chart: {\n          fontFamily: 'inherit'\n        },\n        cutoutPercentage: 75,\n        responsive: true,\n        maintainAspectRatio: false,\n        cutout: '75%',\n        title: {\n          display: false\n        },\n        animation: {\n          animateScale: true,\n          animateRotate: true\n        },\n        tooltips: {\n          enabled: true,\n          intersect: false,\n          mode: 'nearest',\n          bodySpacing: 5,\n          yPadding: 10,\n          xPadding: 10,\n          caretPadding: 0,\n          displayColors: false,\n          backgroundColor: '#20D489',\n          titleFontColor: '#ffffff',\n          cornerRadius: 4,\n          footerSpacing: 0,\n          titleSpacing: 0\n        },\n        plugins: {\n          legend: {\n            display: false\n          }\n        }\n      }\n    };\n    var ctx = element.getContext('2d');\n    var myDoughnut = new Chart(ctx, config);\n  };\n  var initGraph = function initGraph() {\n    var element = document.getElementById(\"kt_project_overview_graph\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Incomplete',\n        data: [70, 70, 80, 80, 75, 75, 75]\n      }, {\n        name: 'Complete',\n        data: [55, 55, 60, 60, 55, 55, 60]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [primary, success]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: gray500,\n            fontSize: '12px'\n          }\n        },\n        crosshairs: {\n          position: 'front',\n          stroke: {\n            color: primary,\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px'\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: gray500,\n            fontSize: '12px'\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px'\n        },\n        y: {\n          formatter: function formatter(val) {\n            return val + \" tasks\";\n          }\n        }\n      },\n      colors: [lightPrimary, lightSuccess],\n      grid: {\n        borderColor: gray200,\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      },\n      markers: {\n        //size: 5,\n        colors: [lightPrimary, lightSuccess],\n        strokeColor: [primary, success],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var initTable = function initTable() {\n    var table = document.querySelector('#kt_profile_overview_table');\n    if (!table) {\n      return;\n    }\n\n    // Set date data order\n    var tableRows = table.querySelectorAll('tbody tr');\n    tableRows.forEach(function (row) {\n      var dateRow = row.querySelectorAll('td');\n      var realDate = moment(dateRow[1].innerHTML, \"MMM D, YYYY\").format();\n      dateRow[1].setAttribute('data-order', realDate);\n    });\n\n    // Init datatable --- more info on datatables: https://datatables.net/manual/\n    var datatable = $(table).DataTable({\n      \"info\": false,\n      'order': []\n    });\n\n    // Filter dropdown elements\n    var filterOrders = document.getElementById('kt_filter_orders');\n    var filterYear = document.getElementById('kt_filter_year');\n\n    // Filter by order status --- official docs reference: https://datatables.net/reference/api/search()\n    filterOrders.addEventListener('change', function (e) {\n      datatable.column(3).search(e.target.value).draw();\n    });\n\n    // Filter by date --- official docs reference: https://momentjs.com/docs/\n    var minDate;\n    var maxDate;\n    filterYear.addEventListener('change', function (e) {\n      var value = e.target.value;\n      switch (value) {\n        case 'thisyear':\n          {\n            minDate = moment().startOf('year').format();\n            maxDate = moment().endOf('year').format();\n            datatable.draw();\n            break;\n          }\n        case 'thismonth':\n          {\n            minDate = moment().startOf('month').format();\n            maxDate = moment().endOf('month').format();\n            datatable.draw();\n            break;\n          }\n        case 'lastmonth':\n          {\n            minDate = moment().subtract(1, 'months').startOf('month').format();\n            maxDate = moment().subtract(1, 'months').endOf('month').format();\n            datatable.draw();\n            break;\n          }\n        case 'last90days':\n          {\n            minDate = moment().subtract(30, 'days').format();\n            maxDate = moment().format();\n            datatable.draw();\n            break;\n          }\n        default:\n          {\n            minDate = moment().subtract(100, 'years').startOf('month').format();\n            maxDate = moment().add(1, 'months').endOf('month').format();\n            datatable.draw();\n            break;\n          }\n      }\n    });\n\n    // Date range filter --- offical docs reference: https://datatables.net/examples/plug-ins/range_filtering.html\n    $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {\n      var min = minDate;\n      var max = maxDate;\n      var date = parseFloat(moment(data[1]).format()) || 0; // use data for the age column\n\n      if (isNaN(min) && isNaN(max) || isNaN(min) && date <= max || min <= date && isNaN(max) || min <= date && date <= max) {\n        return true;\n      }\n      return false;\n    });\n\n    // Search --- official docs reference: https://datatables.net/reference/api/search()\n    var filterSearch = document.getElementById('kt_filter_search');\n    filterSearch.addEventListener('keyup', function (e) {\n      datatable.search(e.target.value).draw();\n    });\n  };\n\n  // Public methods\n  return {\n    init: function init() {\n      initChart();\n      initGraph();\n      initTable();\n    }\n  };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTProjectOverview.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/projects/project/project.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/apps/projects/project/project.js"]();
/******/ 	
/******/ })()
;